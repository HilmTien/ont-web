/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./database.types";

export const publicBracketTypesSchema = z.union([
  z.literal("swiss"),
  z.literal("singleelim"),
]);

export const publicStageTypesSchema = z.union([
  z.literal("qualifiers"),
  z.literal("pvp"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.string(), z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const publicAdminsRowSchema = z.object({
  id: z.number(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicAdminsInsertSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicAdminsUpdateSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number().optional(),
  user_id: z.number().optional(),
});

export const publicAdminsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("admins_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("admins_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicBeatmapsRowSchema = z.object({
  ar: z.number().nullable(),
  artist: z.string(),
  bpm: z.number(),
  cover: z.string().nullable(),
  cs: z.number().nullable(),
  difficulty_name: z.string(),
  drain_time: z.number(),
  hp: z.number().nullable(),
  id: z.number(),
  last_updated: z.string(),
  mapper: z.string(),
  mapset_host: z.string(),
  name: z.string(),
  od: z.number().nullable(),
  osu_id: z.number().nullable(),
  star_rating: z.number(),
});

export const publicBeatmapsInsertSchema = z.object({
  ar: z.number().optional().nullable(),
  artist: z.string(),
  bpm: z.number(),
  cover: z.string().optional().nullable(),
  cs: z.number().optional().nullable(),
  difficulty_name: z.string(),
  drain_time: z.number(),
  hp: z.number().optional().nullable(),
  id: z.number().optional(),
  last_updated: z.string(),
  mapper: z.string(),
  mapset_host: z.string(),
  name: z.string(),
  od: z.number().optional().nullable(),
  osu_id: z.number().optional().nullable(),
  star_rating: z.number(),
});

export const publicBeatmapsUpdateSchema = z.object({
  ar: z.number().optional().nullable(),
  artist: z.string().optional(),
  bpm: z.number().optional(),
  cover: z.string().optional().nullable(),
  cs: z.number().optional().nullable(),
  difficulty_name: z.string().optional(),
  drain_time: z.number().optional(),
  hp: z.number().optional().nullable(),
  id: z.number().optional(),
  last_updated: z.string().optional(),
  mapper: z.string().optional(),
  mapset_host: z.string().optional(),
  name: z.string().optional(),
  od: z.number().optional().nullable(),
  osu_id: z.number().optional().nullable(),
  star_rating: z.number().optional(),
});

export const publicCommentatorsRowSchema = z.object({
  id: z.number(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicCommentatorsInsertSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicCommentatorsUpdateSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number().optional(),
  user_id: z.number().optional(),
});

export const publicCommentatorsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("commentators_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("commentators_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicErrorsRowSchema = z.object({
  code: z.string().nullable(),
  created_at: z.string().nullable(),
  details: z.string().nullable(),
  hint: z.string().nullable(),
  id: z.number(),
});

export const publicErrorsInsertSchema = z.object({
  code: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  details: z.string().optional().nullable(),
  hint: z.string().optional().nullable(),
  id: z.number().optional(),
});

export const publicErrorsUpdateSchema = z.object({
  code: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  details: z.string().optional().nullable(),
  hint: z.string().optional().nullable(),
  id: z.number().optional(),
});

export const publicMappoolMapsRowSchema = z.object({
  beatmap_id: z.number(),
  id: z.number(),
  map_index: z.string(),
  mods: z.string().nullable(),
  stage_id: z.number(),
});

export const publicMappoolMapsInsertSchema = z.object({
  beatmap_id: z.number(),
  id: z.number().optional(),
  map_index: z.string(),
  mods: z.string().optional().nullable(),
  stage_id: z.number(),
});

export const publicMappoolMapsUpdateSchema = z.object({
  beatmap_id: z.number().optional(),
  id: z.number().optional(),
  map_index: z.string().optional(),
  mods: z.string().optional().nullable(),
  stage_id: z.number().optional(),
});

export const publicMappoolMapsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("mappool_maps_beatmap_id_fkey"),
    columns: z.tuple([z.literal("beatmap_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("beatmaps"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("mappool_maps_stage_id_fkey"),
    columns: z.tuple([z.literal("stage_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournament_stages"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicMatchesRowSchema = z.object({
  commentator1_id: z.number().nullable(),
  commentator2_id: z.number().nullable(),
  id: z.number(),
  match_time: z.string(),
  mp_id: z.number().nullable(),
  referee_id: z.number().nullable(),
  stage_id: z.number(),
  streamer_id: z.number().nullable(),
  team1_id: z.number().nullable(),
  team1_label: z.string().nullable(),
  team1_score: z.number().nullable(),
  team2_id: z.number().nullable(),
  team2_label: z.string().nullable(),
  team2_score: z.number().nullable(),
  tournament_id: z.number(),
  tournament_match_id: z.string(),
});

export const publicMatchesInsertSchema = z.object({
  commentator1_id: z.number().optional().nullable(),
  commentator2_id: z.number().optional().nullable(),
  id: z.number().optional(),
  match_time: z.string(),
  mp_id: z.number().optional().nullable(),
  referee_id: z.number().optional().nullable(),
  stage_id: z.number(),
  streamer_id: z.number().optional().nullable(),
  team1_id: z.number().optional().nullable(),
  team1_label: z.string().optional().nullable(),
  team1_score: z.number().optional().nullable(),
  team2_id: z.number().optional().nullable(),
  team2_label: z.string().optional().nullable(),
  team2_score: z.number().optional().nullable(),
  tournament_id: z.number(),
  tournament_match_id: z.string(),
});

export const publicMatchesUpdateSchema = z.object({
  commentator1_id: z.number().optional().nullable(),
  commentator2_id: z.number().optional().nullable(),
  id: z.number().optional(),
  match_time: z.string().optional(),
  mp_id: z.number().optional().nullable(),
  referee_id: z.number().optional().nullable(),
  stage_id: z.number().optional(),
  streamer_id: z.number().optional().nullable(),
  team1_id: z.number().optional().nullable(),
  team1_label: z.string().optional().nullable(),
  team1_score: z.number().optional().nullable(),
  team2_id: z.number().optional().nullable(),
  team2_label: z.string().optional().nullable(),
  team2_score: z.number().optional().nullable(),
  tournament_id: z.number().optional(),
  tournament_match_id: z.string().optional(),
});

export const publicMatchesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("matches_commentator1_id_fkey"),
    columns: z.tuple([z.literal("commentator1_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("commentators"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_commentator2_id_fkey"),
    columns: z.tuple([z.literal("commentator2_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("commentators"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_referee_id_fkey"),
    columns: z.tuple([z.literal("referee_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("referees"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_stage_id_fkey"),
    columns: z.tuple([z.literal("stage_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournament_stages"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_streamer_id_fkey"),
    columns: z.tuple([z.literal("streamer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("streamers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_team1_id_fkey"),
    columns: z.tuple([z.literal("team1_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_team2_id_fkey"),
    columns: z.tuple([z.literal("team2_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicQualifierLobbiesRowSchema = z.object({
  id: z.number(),
  lobby_time: z.string(),
  mp_id: z.number().nullable(),
  referee_id: z.number().nullable(),
  stage_id: z.number(),
  tournament_match_id: z.string(),
});

export const publicQualifierLobbiesInsertSchema = z.object({
  id: z.number().optional(),
  lobby_time: z.string(),
  mp_id: z.number().optional().nullable(),
  referee_id: z.number().optional().nullable(),
  stage_id: z.number(),
  tournament_match_id: z.string(),
});

export const publicQualifierLobbiesUpdateSchema = z.object({
  id: z.number().optional(),
  lobby_time: z.string().optional(),
  mp_id: z.number().optional().nullable(),
  referee_id: z.number().optional().nullable(),
  stage_id: z.number().optional(),
  tournament_match_id: z.string().optional(),
});

export const publicQualifierLobbiesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("qualifier_lobbies_referee_id_fkey"),
    columns: z.tuple([z.literal("referee_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("referees"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("qualifier_lobbies_stage_id_fkey"),
    columns: z.tuple([z.literal("stage_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournament_stages"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicQualifierSignupsRowSchema = z.object({
  id: z.number(),
  lobby_id: z.number(),
  signed_up_at: z.string(),
  user_id: z.number(),
});

export const publicQualifierSignupsInsertSchema = z.object({
  id: z.number().optional(),
  lobby_id: z.number(),
  signed_up_at: z.string().optional(),
  user_id: z.number(),
});

export const publicQualifierSignupsUpdateSchema = z.object({
  id: z.number().optional(),
  lobby_id: z.number().optional(),
  signed_up_at: z.string().optional(),
  user_id: z.number().optional(),
});

export const publicQualifierSignupsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("qualifier_signups_lobby_id_fkey"),
    columns: z.tuple([z.literal("lobby_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("qualifier_lobbies"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("qualifier_signups_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicRefereesRowSchema = z.object({
  id: z.number(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicRefereesInsertSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicRefereesUpdateSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number().optional(),
  user_id: z.number().optional(),
});

export const publicRefereesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("referees_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("referees_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicRegistrationsRowSchema = z.object({
  id: z.number(),
  registered_at: z.string(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicRegistrationsInsertSchema = z.object({
  id: z.number().optional(),
  registered_at: z.string().optional(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicRegistrationsUpdateSchema = z.object({
  id: z.number().optional(),
  registered_at: z.string().optional(),
  tournament_id: z.number().optional(),
  user_id: z.number().optional(),
});

export const publicRegistrationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("registrations_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("registrations_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicScoresRowSchema = z.object({
  "100s": z.number().nullable(),
  "50s": z.number().nullable(),
  accuracy: z.number(),
  end_time: z.string(),
  id: z.number(),
  mappool_map_id: z.number(),
  misses: z.number().nullable(),
  mode: z.number(),
  mods: z.number(),
  score: z.number(),
  team_player_id: z.number(),
  tournament_id: z.number(),
});

export const publicScoresInsertSchema = z.object({
  "100s": z.number().optional().nullable(),
  "50s": z.number().optional().nullable(),
  accuracy: z.number(),
  end_time: z.string(),
  id: z.number().optional(),
  mappool_map_id: z.number(),
  misses: z.number().optional().nullable(),
  mode: z.number(),
  mods: z.number(),
  score: z.number(),
  team_player_id: z.number(),
  tournament_id: z.number(),
});

export const publicScoresUpdateSchema = z.object({
  "100s": z.number().optional().nullable(),
  "50s": z.number().optional().nullable(),
  accuracy: z.number().optional(),
  end_time: z.string().optional(),
  id: z.number().optional(),
  mappool_map_id: z.number().optional(),
  misses: z.number().optional().nullable(),
  mode: z.number().optional(),
  mods: z.number().optional(),
  score: z.number().optional(),
  team_player_id: z.number().optional(),
  tournament_id: z.number().optional(),
});

export const publicScoresRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("scores_mappool_map_id_fkey"),
    columns: z.tuple([z.literal("mappool_map_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("mappool_maps"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("scores_team_player_id_fkey"),
    columns: z.tuple([z.literal("team_player_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("team_players"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("scores_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicStreamersRowSchema = z.object({
  id: z.number(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicStreamersInsertSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicStreamersUpdateSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number().optional(),
  user_id: z.number().optional(),
});

export const publicStreamersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("streamers_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("streamers_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTeamPlayersRowSchema = z.object({
  id: z.number(),
  team_id: z.number(),
  user_id: z.number(),
});

export const publicTeamPlayersInsertSchema = z.object({
  id: z.number().optional(),
  team_id: z.number(),
  user_id: z.number(),
});

export const publicTeamPlayersUpdateSchema = z.object({
  id: z.number().optional(),
  team_id: z.number().optional(),
  user_id: z.number().optional(),
});

export const publicTeamPlayersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("team_players_team_id_fkey"),
    columns: z.tuple([z.literal("team_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("team_players_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTeamsRowSchema = z.object({
  id: z.number(),
  name: z.string(),
  tournament_id: z.number(),
});

export const publicTeamsInsertSchema = z.object({
  id: z.number().optional(),
  name: z.string(),
  tournament_id: z.number(),
});

export const publicTeamsUpdateSchema = z.object({
  id: z.number().optional(),
  name: z.string().optional(),
  tournament_id: z.number().optional(),
});

export const publicTeamsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("teams_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTournamentStagesRowSchema = z.object({
  best_of: z.number().nullable(),
  bracket_type: publicBracketTypesSchema.nullable(),
  id: z.number(),
  is_public: z.boolean(),
  stage_index: z.number(),
  stage_name: z.string(),
  stage_type: publicStageTypesSchema,
  tournament_id: z.number(),
});

export const publicTournamentStagesInsertSchema = z.object({
  best_of: z.number().optional().nullable(),
  bracket_type: publicBracketTypesSchema.optional().nullable(),
  id: z.number().optional(),
  is_public: z.boolean().optional(),
  stage_index: z.number(),
  stage_name: z.string(),
  stage_type: publicStageTypesSchema,
  tournament_id: z.number(),
});

export const publicTournamentStagesUpdateSchema = z.object({
  best_of: z.number().optional().nullable(),
  bracket_type: publicBracketTypesSchema.optional().nullable(),
  id: z.number().optional(),
  is_public: z.boolean().optional(),
  stage_index: z.number().optional(),
  stage_name: z.string().optional(),
  stage_type: publicStageTypesSchema.optional(),
  tournament_id: z.number().optional(),
});

export const publicTournamentStagesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("tournament_stages_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTournamentsRowSchema = z.object({
  acronym: z.string(),
  can_register: z.boolean(),
  id: z.number(),
  name: z.string(),
  team_size: z.number().nullable(),
});

export const publicTournamentsInsertSchema = z.object({
  acronym: z.string(),
  can_register: z.boolean().optional(),
  id: z.number().optional(),
  name: z.string(),
  team_size: z.number().optional().nullable(),
});

export const publicTournamentsUpdateSchema = z.object({
  acronym: z.string().optional(),
  can_register: z.boolean().optional(),
  id: z.number().optional(),
  name: z.string().optional(),
  team_size: z.number().optional().nullable(),
});

export const publicUsersRowSchema = z.object({
  accuracy: z.number().nullable(),
  badges: z.number().nullable(),
  country_code: z.string().nullable(),
  id: z.number(),
  is_restricted: z.boolean(),
  maximum_combo: z.number().nullable(),
  osu_id: z.number(),
  play_count: z.number().nullable(),
  pp: z.number().nullable(),
  rank: z.number().nullable(),
  tournament_badges: z.number().nullable(),
  username: z.string(),
});

export const publicUsersInsertSchema = z.object({
  accuracy: z.number().optional().nullable(),
  badges: z.number().optional().nullable(),
  country_code: z.string().optional().nullable(),
  id: z.number().optional(),
  is_restricted: z.boolean(),
  maximum_combo: z.number().optional().nullable(),
  osu_id: z.number(),
  play_count: z.number().optional().nullable(),
  pp: z.number().optional().nullable(),
  rank: z.number().optional().nullable(),
  tournament_badges: z.number().optional().nullable(),
  username: z.string(),
});

export const publicUsersUpdateSchema = z.object({
  accuracy: z.number().optional().nullable(),
  badges: z.number().optional().nullable(),
  country_code: z.string().optional().nullable(),
  id: z.number().optional(),
  is_restricted: z.boolean().optional(),
  maximum_combo: z.number().optional().nullable(),
  osu_id: z.number().optional(),
  play_count: z.number().optional().nullable(),
  pp: z.number().optional().nullable(),
  rank: z.number().optional().nullable(),
  tournament_badges: z.number().optional().nullable(),
  username: z.string().optional(),
});
