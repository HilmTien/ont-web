/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./database.types";

export const publicStageTypesSchema = z.union([
  z.literal("qualifiers"),
  z.literal("pvp"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const publicAdminsRowSchemaSchema = z.object({
  id: z.number(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicAdminsInsertSchemaSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicAdminsUpdateSchemaSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number().optional(),
  user_id: z.number().optional(),
});

export const publicAdminsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("admins_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("admins_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicBeatmapsRowSchemaSchema = z.object({
  ar: z.number().nullable(),
  artist: z.string(),
  bpm: z.number(),
  cs: z.number().nullable(),
  difficulty_name: z.string(),
  drain_time: z.number(),
  hp: z.number().nullable(),
  id: z.number(),
  mapper: z.string(),
  name: z.string(),
  od: z.number().nullable(),
  osu_id: z.number().nullable(),
  star_rating: z.number(),
});

export const publicBeatmapsInsertSchemaSchema = z.object({
  ar: z.number().optional().nullable(),
  artist: z.string(),
  bpm: z.number(),
  cs: z.number().optional().nullable(),
  difficulty_name: z.string(),
  drain_time: z.number(),
  hp: z.number().optional().nullable(),
  id: z.number().optional(),
  mapper: z.string(),
  name: z.string(),
  od: z.number().optional().nullable(),
  osu_id: z.number().optional().nullable(),
  star_rating: z.number(),
});

export const publicBeatmapsUpdateSchemaSchema = z.object({
  ar: z.number().optional().nullable(),
  artist: z.string().optional(),
  bpm: z.number().optional(),
  cs: z.number().optional().nullable(),
  difficulty_name: z.string().optional(),
  drain_time: z.number().optional(),
  hp: z.number().optional().nullable(),
  id: z.number().optional(),
  mapper: z.string().optional(),
  name: z.string().optional(),
  od: z.number().optional().nullable(),
  osu_id: z.number().optional().nullable(),
  star_rating: z.number().optional(),
});

export const publicCommentatorsRowSchemaSchema = z.object({
  id: z.number(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicCommentatorsInsertSchemaSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicCommentatorsUpdateSchemaSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number().optional(),
  user_id: z.number().optional(),
});

export const publicCommentatorsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("commentators_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("commentators_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicMappoolMapsRowSchemaSchema = z.object({
  beatmap_id: z.number(),
  id: z.number(),
  map_index: z.string(),
  mods: z.string().nullable(),
  stage_id: z.number(),
});

export const publicMappoolMapsInsertSchemaSchema = z.object({
  beatmap_id: z.number(),
  id: z.number().optional(),
  map_index: z.string(),
  mods: z.string().optional().nullable(),
  stage_id: z.number(),
});

export const publicMappoolMapsUpdateSchemaSchema = z.object({
  beatmap_id: z.number().optional(),
  id: z.number().optional(),
  map_index: z.string().optional(),
  mods: z.string().optional().nullable(),
  stage_id: z.number().optional(),
});

export const publicMappoolMapsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("mappool_maps_beatmap_id_fkey"),
    columns: z.tuple([z.literal("beatmap_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("beatmaps"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("mappool_maps_stage_id_fkey"),
    columns: z.tuple([z.literal("stage_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournament_stages"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicMatchesRowSchemaSchema = z.object({
  commentator1_id: z.number().nullable(),
  commentator2_id: z.number().nullable(),
  id: z.number(),
  match_time: z.string(),
  mp_id: z.number().nullable(),
  referee_id: z.number().nullable(),
  stage_id: z.number(),
  streamer_id: z.number().nullable(),
  team1_id: z.number(),
  team1_score: z.number().nullable(),
  team2_id: z.number(),
  team2_score: z.number().nullable(),
  tournament_id: z.number(),
  tournament_match_id: z.string(),
});

export const publicMatchesInsertSchemaSchema = z.object({
  commentator1_id: z.number().optional().nullable(),
  commentator2_id: z.number().optional().nullable(),
  id: z.number().optional(),
  match_time: z.string(),
  mp_id: z.number().optional().nullable(),
  referee_id: z.number().optional().nullable(),
  stage_id: z.number(),
  streamer_id: z.number().optional().nullable(),
  team1_id: z.number(),
  team1_score: z.number().optional().nullable(),
  team2_id: z.number(),
  team2_score: z.number().optional().nullable(),
  tournament_id: z.number(),
  tournament_match_id: z.string(),
});

export const publicMatchesUpdateSchemaSchema = z.object({
  commentator1_id: z.number().optional().nullable(),
  commentator2_id: z.number().optional().nullable(),
  id: z.number().optional(),
  match_time: z.string().optional(),
  mp_id: z.number().optional().nullable(),
  referee_id: z.number().optional().nullable(),
  stage_id: z.number().optional(),
  streamer_id: z.number().optional().nullable(),
  team1_id: z.number().optional(),
  team1_score: z.number().optional().nullable(),
  team2_id: z.number().optional(),
  team2_score: z.number().optional().nullable(),
  tournament_id: z.number().optional(),
  tournament_match_id: z.string().optional(),
});

export const publicMatchesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("matches_commentator1_id_fkey"),
    columns: z.tuple([z.literal("commentator1_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("commentators"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_commentator2_id_fkey"),
    columns: z.tuple([z.literal("commentator2_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("commentators"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_referee_id_fkey"),
    columns: z.tuple([z.literal("referee_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("referees"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_stage_id_fkey"),
    columns: z.tuple([z.literal("stage_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournament_stages"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_streamer_id_fkey"),
    columns: z.tuple([z.literal("streamer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("streamers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_team1_id_fkey"),
    columns: z.tuple([z.literal("team1_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_team2_id_fkey"),
    columns: z.tuple([z.literal("team2_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicQualifierLobbiesRowSchemaSchema = z.object({
  id: z.number(),
  lobby_time: z.string(),
  mp_id: z.number().nullable(),
  referee_id: z.number().nullable(),
  stage_id: z.number(),
  tournament_match_id: z.string(),
});

export const publicQualifierLobbiesInsertSchemaSchema = z.object({
  id: z.number().optional(),
  lobby_time: z.string(),
  mp_id: z.number().optional().nullable(),
  referee_id: z.number().optional().nullable(),
  stage_id: z.number(),
  tournament_match_id: z.string(),
});

export const publicQualifierLobbiesUpdateSchemaSchema = z.object({
  id: z.number().optional(),
  lobby_time: z.string().optional(),
  mp_id: z.number().optional().nullable(),
  referee_id: z.number().optional().nullable(),
  stage_id: z.number().optional(),
  tournament_match_id: z.string().optional(),
});

export const publicQualifierLobbiesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("qualifier_lobbies_referee_id_fkey"),
    columns: z.tuple([z.literal("referee_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("referees"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("qualifier_lobbies_stage_id_fkey"),
    columns: z.tuple([z.literal("stage_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournament_stages"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicQualifierSignupsRowSchemaSchema = z.object({
  id: z.number(),
  lobby_id: z.number(),
  signed_up_at: z.string(),
  user_id: z.number(),
});

export const publicQualifierSignupsInsertSchemaSchema = z.object({
  id: z.number().optional(),
  lobby_id: z.number(),
  signed_up_at: z.string().optional(),
  user_id: z.number(),
});

export const publicQualifierSignupsUpdateSchemaSchema = z.object({
  id: z.number().optional(),
  lobby_id: z.number().optional(),
  signed_up_at: z.string().optional(),
  user_id: z.number().optional(),
});

export const publicQualifierSignupsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("qualifier_signups_lobby_id_fkey"),
    columns: z.tuple([z.literal("lobby_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("qualifier_lobbies"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("qualifier_signups_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicRefereesRowSchemaSchema = z.object({
  id: z.number(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicRefereesInsertSchemaSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicRefereesUpdateSchemaSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number().optional(),
  user_id: z.number().optional(),
});

export const publicRefereesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("referees_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("referees_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicRegistrationsRowSchemaSchema = z.object({
  id: z.number(),
  registered_at: z.string(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicRegistrationsInsertSchemaSchema = z.object({
  id: z.number().optional(),
  registered_at: z.string().optional(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicRegistrationsUpdateSchemaSchema = z.object({
  id: z.number().optional(),
  registered_at: z.string().optional(),
  tournament_id: z.number().optional(),
  user_id: z.number().optional(),
});

export const publicRegistrationsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("registrations_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("registrations_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicScoresRowSchemaSchema = z.object({
  "100s": z.number().nullable(),
  "50s": z.number().nullable(),
  accuracy: z.number(),
  end_time: z.string(),
  id: z.number(),
  mappool_map_id: z.number(),
  misses: z.number().nullable(),
  mode: z.number(),
  mods: z.number(),
  score: z.number(),
  team_player_id: z.number(),
  tournament_id: z.number(),
});

export const publicScoresInsertSchemaSchema = z.object({
  "100s": z.number().optional().nullable(),
  "50s": z.number().optional().nullable(),
  accuracy: z.number(),
  end_time: z.string(),
  id: z.number().optional(),
  mappool_map_id: z.number(),
  misses: z.number().optional().nullable(),
  mode: z.number(),
  mods: z.number(),
  score: z.number(),
  team_player_id: z.number(),
  tournament_id: z.number(),
});

export const publicScoresUpdateSchemaSchema = z.object({
  "100s": z.number().optional().nullable(),
  "50s": z.number().optional().nullable(),
  accuracy: z.number().optional(),
  end_time: z.string().optional(),
  id: z.number().optional(),
  mappool_map_id: z.number().optional(),
  misses: z.number().optional().nullable(),
  mode: z.number().optional(),
  mods: z.number().optional(),
  score: z.number().optional(),
  team_player_id: z.number().optional(),
  tournament_id: z.number().optional(),
});

export const publicScoresRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("scores_mappool_map_id_fkey"),
    columns: z.tuple([z.literal("mappool_map_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("mappool_maps"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("scores_team_player_id_fkey"),
    columns: z.tuple([z.literal("team_player_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("team_players"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("scores_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicStreamersRowSchemaSchema = z.object({
  id: z.number(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicStreamersInsertSchemaSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number(),
  user_id: z.number(),
});

export const publicStreamersUpdateSchemaSchema = z.object({
  id: z.number().optional(),
  tournament_id: z.number().optional(),
  user_id: z.number().optional(),
});

export const publicStreamersRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("streamers_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("streamers_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTeamPlayersRowSchemaSchema = z.object({
  id: z.number(),
  team_id: z.number(),
  user_id: z.number(),
});

export const publicTeamPlayersInsertSchemaSchema = z.object({
  id: z.number().optional(),
  team_id: z.number(),
  user_id: z.number(),
});

export const publicTeamPlayersUpdateSchemaSchema = z.object({
  id: z.number().optional(),
  team_id: z.number().optional(),
  user_id: z.number().optional(),
});

export const publicTeamPlayersRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("team_players_team_id_fkey"),
    columns: z.tuple([z.literal("team_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("team_players_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTeamsRowSchemaSchema = z.object({
  id: z.number(),
  name: z.string(),
  tournament_id: z.number(),
});

export const publicTeamsInsertSchemaSchema = z.object({
  id: z.number().optional(),
  name: z.string(),
  tournament_id: z.number(),
});

export const publicTeamsUpdateSchemaSchema = z.object({
  id: z.number().optional(),
  name: z.string().optional(),
  tournament_id: z.number().optional(),
});

export const publicTeamsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("teams_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTournamentStagesRowSchemaSchema = z.object({
  id: z.number(),
  stage_index: z.number(),
  stage_name: z.string(),
  stage_type: publicStageTypesSchema,
  tournament_id: z.number(),
});

export const publicTournamentStagesInsertSchemaSchema = z.object({
  id: z.number().optional(),
  stage_index: z.number(),
  stage_name: z.string(),
  stage_type: publicStageTypesSchema,
  tournament_id: z.number(),
});

export const publicTournamentStagesUpdateSchemaSchema = z.object({
  id: z.number().optional(),
  stage_index: z.number().optional(),
  stage_name: z.string().optional(),
  stage_type: publicStageTypesSchema.optional(),
  tournament_id: z.number().optional(),
});

export const publicTournamentStagesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("tournament_stages_tournament_id_fkey"),
    columns: z.tuple([z.literal("tournament_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tournaments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTournamentsRowSchemaSchema = z.object({
  acronym: z.string(),
  id: z.number(),
  name: z.string(),
  team_size: z.number().nullable(),
});

export const publicTournamentsInsertSchemaSchema = z.object({
  acronym: z.string(),
  id: z.number().optional(),
  name: z.string(),
  team_size: z.number().optional().nullable(),
});

export const publicTournamentsUpdateSchemaSchema = z.object({
  acronym: z.string().optional(),
  id: z.number().optional(),
  name: z.string().optional(),
  team_size: z.number().optional().nullable(),
});

export const publicUsersRowSchemaSchema = z.object({
  id: z.number(),
  osu_id: z.number(),
  username: z.string(),
});

export const publicUsersInsertSchemaSchema = z.object({
  id: z.number().optional(),
  osu_id: z.number(),
  username: z.string(),
});

export const publicUsersUpdateSchemaSchema = z.object({
  id: z.number().optional(),
  osu_id: z.number().optional(),
  username: z.string().optional(),
});
